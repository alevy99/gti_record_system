/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ie.gti.recordsystem.ui.frame;

import ie.gti.recordsystem.config.ApplicationConfig;
import ie.gti.recordsystem.dao.UserDao;
import ie.gti.recordsystem.model.Role;
import ie.gti.recordsystem.model.User;
import ie.gti.recordsystem.service.UserService;
import ie.gti.recordsystem.ui.AbstractForm;
import ie.gti.recordsystem.ui.comp.PaddedJTable;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 *
 * @author Andrei
 */
@Component
public class UserFrame extends AbstractForm {

    private static final int ID_COLUMN = 0;
    private static final int USERNAME_COLUMN = 1;
    private static final int PASSWORD_COLUMN = 2;
    private static final int IS_STUDENT_COLUMN = 3;
    private static final int IS_TEACHER_COLUMN = 4;
    private static final int IS_ADMIN_COLUMN = 5;

    @Autowired
    private UserService userService;
    
    @Autowired
    private MainFrame mainFrame;

    private boolean isInserting = false;

    private final Set<Integer> rowsInserting = new HashSet<>();
    
    /**
     * Creates new form PersonFrame
     */
    public UserFrame() {
        super();
        initComponents();
        initForm();
    }

    @Override
    protected void initForm() {
//        final int CELL_PAD = 5;

        super.initForm();

//        jUserTable.setCellSelectionEnabled(false);
//        jUserTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        TableColumnModel columnModel = jUserTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(20);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(100);
        columnModel.getColumn(3).setPreferredWidth(30);
        columnModel.getColumn(4).setPreferredWidth(30);
        columnModel.getColumn(5).setPreferredWidth(30);
//        columnModel.getColumn(6).setPreferredWidth(40);

        // Add selection listener
        jUserTable.getSelectionModel().addListSelectionListener(this::updateUI);

//        // Add padding to cells
//        PaddedCellRenderer paddedCellRenderer = new PaddedCellRenderer(CELL_PAD);
//
//        // Apply to all text columns
//        for (int i = 0; i < IS_STUDENT_COLUMN; i++) {
//            jUserTable.getColumnModel().getColumn(i).setCellRenderer(paddedCellRenderer);
//        }
//
//        // Set cell editor with paddings
//        JTextField textField = new JTextField();
//        textField.setBorder(new EmptyBorder(0, CELL_PAD, 0, CELL_PAD)); // Apply padding inside the editor
//
//        DefaultCellEditor cellEditor = new DefaultCellEditor(textField);
//        jUserTable.setDefaultEditor(Object.class, cellEditor); // Apply to all cells
//
//        // Add sorter to the table
//        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jUserTable.getModel());
//        jUserTable.setRowSorter(sorter);

//        jUserTable.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());
//        jUserTable.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor(new JCheckBox()));
    }

    private void updateUI(ListSelectionEvent listSelectionEvent) {
        jUpdateBtn.setEnabled(jUserTable.getSelectedRowCount() > 0);
        jDeleteBtn.setEnabled(jUserTable.getSelectedRowCount() > 0);
    }

    protected void onFormHidden() {
        super.onFormHidden();
        mainFrame.setVisible(true);
    }


    protected void onFormShown() {
        super.onFormShown();
        reloadTableData();
        updateUI(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jUserTable = new javax.swing.JTable();
        jCloseBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jAddPanel = new javax.swing.JPanel();
        jAddBtn = new javax.swing.JButton();
        jAddCancelBtn = new javax.swing.JButton();
        jAddSaveBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jUpdateBtn = new javax.swing.JButton();
        jRevertBtn = new javax.swing.JButton();
        jDeleteBtn = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPasswordField1.setText("jPasswordField1");

        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jUserTable.setAutoCreateRowSorter(true);
        jUserTable.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jUserTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Password", "Student", "Teacher", "Admin", "Person"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jUserTable.setFillsViewportHeight(true);
        jUserTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jUserTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jUserTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jUserTable);

        jCloseBtn.setText("Close");
        jCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("USERS");

        jAddPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jAddBtn.setText("Add new user");
        jAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddBtnActionPerformed(evt);
            }
        });

        jAddCancelBtn.setText("Cancel");
        jAddCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddCancelBtnActionPerformed(evt);
            }
        });

        jAddSaveBtn.setText("Save new user(s)");
        jAddSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jAddPanelLayout = new javax.swing.GroupLayout(jAddPanel);
        jAddPanel.setLayout(jAddPanelLayout);
        jAddPanelLayout.setHorizontalGroup(
            jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jAddSaveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(jAddBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jAddCancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jAddPanelLayout.setVerticalGroup(
            jAddPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jAddBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jAddSaveBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jAddCancelBtn)
                .addGap(15, 15, 15))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jUpdateBtn.setText("Update selected");
        jUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateBtnActionPerformed(evt);
            }
        });

        jRevertBtn.setText("Reload users");
        jRevertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRevertBtnActionPerformed(evt);
            }
        });

        jDeleteBtn.setText("Delete selected");
        jDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jUpdateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(jDeleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRevertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jUpdateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jDeleteBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jRevertBtn)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jAddPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(305, 305, 305)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jAddPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, true)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, true)
                        .addComponent(jCloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 848, Short.MAX_VALUE)))
                .addContainerGap(45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(jCloseBtn)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void setTableSelection(boolean isEnabled) {
        jUserTable.setRowSelectionAllowed(isEnabled);
        jUserTable.setColumnSelectionAllowed(isEnabled);
    }

    private void reloadTableData() {
        stopInserting();
        if (jUserTable.getModel() instanceof DefaultTableModel model) {
            // Clear table
            model.setRowCount(0);

            List<User> users = userService.getAllUsers();

            users.forEach(user -> {
                model.addRow(new Object[]{user.getId(), user.getUsername(), user.getPassword(),
                        user.isStudent(), user.isTeacher(), user.isAdmin(), "Delete"});
            });

        } else {
            throw new RuntimeException("Unknown table model");
        }
//        setTableSelection(true);
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        System.out.println("WINDOW OPENED");
    }//GEN-LAST:event_formWindowOpened

    private void jRevertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRevertBtnActionPerformed
        reloadTableData();
    }//GEN-LAST:event_jRevertBtnActionPerformed

    private void jCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseBtnActionPerformed
        this.setVisible(false);
        mainFrame.setVisible(true);
    }//GEN-LAST:event_jCloseBtnActionPerformed

    private void jDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteBtnActionPerformed
        if (! confirmBatchTableAction("Confirm delete", "Are you sure want to delete users:")) return;

        Arrays.stream(jUserTable.getSelectedRows()).forEach(row -> {
            userService.deleteUser((Long) jUserTable.getModel().getValueAt(row, 0));
//            ((DefaultTableModel) jUserTable.getModel()).removeRow(row);
//            ids.add((Long) jUserTable.getModel().getValueAt(row, 0));
        });
//        userDao.deleteUsersById(ids);
        reloadTableData();
    }//GEN-LAST:event_jDeleteBtnActionPerformed

    private boolean confirmBatchTableAction(String title, String message) {
        if (jUserTable.getSelectedRows().length == 0) {
            return false;
        }
        return JOptionPane.showConfirmDialog(this,
                message + "\n" +
                        Arrays.stream(jUserTable.getSelectedRows()).
                                mapToObj(row -> jUserTable.getModel().getValueAt(row, USERNAME_COLUMN).toString()).
                                collect(Collectors.joining(", ")),
                title,
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION;
    }

    private void jAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) jUserTable.getModel();

        model.addRow(new Object[]{0L, "", "", false, false, false, "Delete"});
        int newRow = jUserTable.getRowCount() - 1;
        jUserTable.setRowSelectionInterval(newRow, newRow);
        startInserting();
    }//GEN-LAST:event_jAddBtnActionPerformed

    private void jUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateBtnActionPerformed
        if (! confirmBatchTableAction("Confirm update", "Are you sure want to update users:")) return;

        if (isInserting) {

        } else {
            Arrays.stream(jUserTable.getSelectedRows()).forEach(row -> {
                User user = new User();
                user.setId((Long) jUserTable.getValueAt(row, 0));
                user.setUsername(jUserTable.getValueAt(row, 1).toString());
                user.setPassword(jUserTable.getValueAt(row, 2).toString());

                fillUserRoles(row, user);

                userService.updateUser(user);
//                newUser.setUsername(jUserTable.getValueAt(row, 1).toString());
//                newUser.setPassword(jUserTable.getValueAt(row, 2).toString());
//                long newId = userService.updateUser(newUser);
            });
        }
    }//GEN-LAST:event_jUpdateBtnActionPerformed

    private void jAddCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddCancelBtnActionPerformed
        stopInserting();
        // Delete last row
        ((DefaultTableModel) jUserTable.getModel()).removeRow(jUserTable.getRowCount() - 1);
    }//GEN-LAST:event_jAddCancelBtnActionPerformed

    private void jAddSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddSaveBtnActionPerformed
        rowsInserting.forEach(row -> {
            User newUser = new User();
            newUser.setUsername(jUserTable.getValueAt(row, USERNAME_COLUMN).toString());
            newUser.setPassword(jUserTable.getValueAt(row, PASSWORD_COLUMN).toString());

            fillUserRoles(row, newUser);

            long newId = userService.insertUser(newUser);
            jUserTable.setValueAt(newId, row, 0);
        });
        stopInserting();
    }//GEN-LAST:event_jAddSaveBtnActionPerformed

    private void fillUserRoles(int row, User user) {
        if ((Boolean) jUserTable.getValueAt(row, IS_STUDENT_COLUMN)) {
            user.getRoles().add(Role.RoleType.STUDENT.asRole());
        }

        if ((Boolean) jUserTable.getValueAt(row, IS_TEACHER_COLUMN)) {
            user.getRoles().add(Role.RoleType.TEACHER.asRole());
        }

        if ((Boolean) jUserTable.getValueAt(row, IS_ADMIN_COLUMN)) {
            user.getRoles().add(Role.RoleType.ADMIN.asRole());
        }
    }


    private void startInserting() {
        rowsInserting.add(jUserTable.getRowCount() - 1);
        isInserting = true;
        // disable all the other buttons
//        jAddBtn.setEnabled(false);
        jAddCancelBtn.setEnabled(true);
        jAddSaveBtn.setEnabled(true);

        jUpdateBtn.setEnabled(false);
        jDeleteBtn.setEnabled(false);
//        setTableSelection(false);
    }

    private void stopInserting() {
        isInserting = false;
        // enable all the buttons etc
//        jAddBtn.setEnabled(true);
        jAddCancelBtn.setEnabled(false);
        jAddSaveBtn.setEnabled(false);

        jUpdateBtn.setEnabled(true);
        jDeleteBtn.setEnabled(true);

        rowsInserting.clear();
//        setTableSelection(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
//
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                UserFrame frame = new UserFrame();
                AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(
                        ApplicationConfig.class
                );
                UserFrame frame = context.getBean(UserFrame.class);
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddBtn;
    private javax.swing.JButton jAddCancelBtn;
    private javax.swing.JPanel jAddPanel;
    private javax.swing.JButton jAddSaveBtn;
    private javax.swing.JButton jCloseBtn;
    private javax.swing.JButton jDeleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JButton jRevertBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jUpdateBtn;
    private javax.swing.JTable jUserTable;
    // End of variables declaration//GEN-END:variables


    @Override
    protected int getDefaultCloseOperationValue() {
        return JFrame.HIDE_ON_CLOSE;
    }
}
